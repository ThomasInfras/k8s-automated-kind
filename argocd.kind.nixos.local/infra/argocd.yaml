apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argo-cd
  namespace: argocd-infra
operation:
  sync:
    syncStrategy:
      hook:
        force: true  
spec:
  project: default
  source:
    repoURL: 'https://argoproj.github.io/argo-helm'
    chart: argo-cd
    targetRevision: "7.5.0"  
    helm:
      values: |
        repoServer:
          volumes:
            - name: helm-replace
              configMap:
                name: config-map-helm-replace
                defaultMode: 0777
          volumeMounts:
            - name: helm-replace
              mountPath: /usr/local/sbin/helm
              subPath: helm
          env:
            - name: HELM_BIN
              value: /usr/local/bin/helm
        configs:
          secret:
            argocdServerAdminPassword: "$2a$10$7MobiW34X3tD5VH5grg3EePBFbH/6zqD0a6swYEr8/X.zdWtVTQ0i"
        global:
          domain: argocd.kind.nixos.local
        server:
          ingress:
            ingressClassName: nginx
            enabled: true
            annotations:
              gethomepage.dev/enabled: "true"
              gethomepage.dev/name: "ARGOCD"
              gethomepage.dev/description: Argo CD automates the deployment of the desired application states in the specified target environments.
              gethomepage.dev/pod-selector: "app.kubernetes.io/component=server"
              gethomepage.dev/icon: https://miro.medium.com/v2/resize:fit:256/0*sLy_MPUNVdemCJf4.png
              gethomepage.dev/group: Orchestration
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true" 
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/secure-backends: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/hsts: "false"
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: argocd  # Namespace où Argo CD sera déployé
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true      
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: github-applis
  namespace: argocd
spec:
  project: default

  source:
    repoURL: 'https://github.com/ThomasInfras/k8s-automated-kind'
    targetRevision: HEAD
    path: argocd.kind.nixos.local/applis

  destination:
    server: 'https://kubernetes.default.svc'
    namespace: argocd

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-map-helm-replace
  namespace: argocd
data:
  helm: |-
    #!/bin/bash

    HELM_BIN=${HELM_BIN:-helm}

    new_args=()
    template_found=false

    for arg in "$@"; do
      if [[ "$arg" == "template" ]]; then
        template_found=true
        new_args+=("$arg")
      elif $template_found && [[ "${#new_args[@]}" -eq 1 ]]; then
        new_args+=("--dry-run=server" "$arg")
        template_found=false
      else
        new_args+=("$arg")
      fi
    done

    $HELM_BIN "${new_args[@]}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-repo-server-access
  namespace: argocd
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-repo-server-access-binding
  namespace: argocd
subjects:
- kind: ServiceAccount
  name: argocd-repo-server
  namespace: argocd
roleRef:
  kind: ClusterRole
  name: argocd-repo-server-access
  apiGroup: rbac.authorization.k8s.io
